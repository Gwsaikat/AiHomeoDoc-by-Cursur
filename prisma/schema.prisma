// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and user management
model User {
  id                String      @id @default(cuid())
  name              String?
  email             String      @unique
  password          String?
  emailVerified     DateTime?
  image             String?
  role              UserRole    @default(PATIENT)
  subscriptionTier  SubTier     @default(FREE)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  patient           Patient?
  practitioner      Practitioner?
  clinic            Clinic?
  consultations     Consultation[] @relation("UserConsultations")
  healthReports     HealthReport[]
  accounts          Account[]
  sessions          Session[]
  payments          Payment[]
  emergencySOS      EmergencySOS[]
}

enum UserRole {
  ADMIN
  PRACTITIONER
  PATIENT
  CLINIC
}

enum SubTier {
  FREE
  PREMIUM_MONTHLY
  PREMIUM_YEARLY
  DOCTOR_PRO
  CLINIC_BASIC
  CLINIC_PREMIUM
  CLINIC_ENTERPRISE
}

// Patient profile with health information
model Patient {
  id                String         @id @default(cuid())
  userId            String         @unique
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  dateOfBirth       DateTime?
  gender            String?
  address           String?
  phoneNumber       String?
  emergencyContact  String?
  medicalHistory    String?
  allergies         String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  // Relations
  consultations     Consultation[] @relation("PatientConsultations")
  treatments        Treatment[]
  symptomRecords    SymptomRecord[]
  medicineReminders MedicineReminder[]
  healthReports     HealthReport[]
  healthImages      HealthImage[]
  lifestyle         LifestyleRecommendation[]
  emergencySOS      EmergencySOS[]
}

// Practitioner profile with specialization information
model Practitioner {
  id                String          @id @default(cuid())
  userId            String          @unique
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialization    String?
  qualification     String?
  experience        Int?
  licenseNumber     String?
  bio               String?
  rating            Float?
  reviewCount       Int             @default(0)
  isVerified        Boolean         @default(false)
  clinicId          String?
  clinic            Clinic?         @relation(fields: [clinicId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  // Relations
  consultations     Consultation[]  @relation("PractitionerConsultations")
  availabilities    Availability[]
  prescriptions     EPrescription[]
  followUps         FollowUp[]
  reviews           DoctorReview[]
}

// Clinic model for homeopathy clinics and hospitals
model Clinic {
  id                String        @id @default(cuid())
  userId            String        @unique
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  name              String
  address           String
  phoneNumber       String
  email             String?
  website           String?
  description       String?
  registrationNo    String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  practitioners     Practitioner[]
  medicineInventory MedicineInventory[]
}

// Consultation scheduling and records
model Consultation {
  id                String             @id @default(cuid())
  userId            String
  user              User               @relation("UserConsultations", fields: [userId], references: [id])
  patientId         String
  patient           Patient            @relation("PatientConsultations", fields: [patientId], references: [id])
  practitionerId    String
  practitioner      Practitioner       @relation("PractitionerConsultations", fields: [practitionerId], references: [id])
  consultationType  ConsultationType   @default(VIDEO)
  scheduledAt       DateTime
  status            ConsultationStatus @default(SCHEDULED)
  notes             String?
  diagnosis         String?
  followUpDate      DateTime?
  recordingUrl      String?            // For video consultations
  chatTranscript    String?            // For text consultations
  amount            Float?             // Consultation fee
  isPaid            Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  // Relations
  treatments        Treatment[]
  prescriptions     EPrescription[]
  followUps         FollowUp[]
  healthReport      HealthReport?
}

enum ConsultationType {
  VIDEO
  TEXT
  IN_PERSON
}

enum ConsultationStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

// E-Prescription model
model EPrescription {
  id                String       @id @default(cuid())
  consultationId    String
  consultation      Consultation @relation(fields: [consultationId], references: [id])
  practitionerId    String
  practitioner      Practitioner @relation(fields: [practitionerId], references: [id])
  prescriptionData  Json         // Detailed prescription information
  aiRecommended     Boolean      @default(false)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  // Relations
  treatments        Treatment[]
}

// Treatment recommendations and prescriptions
model Treatment {
  id                String         @id @default(cuid())
  patientId         String
  patient           Patient        @relation(fields: [patientId], references: [id])
  consultationId    String?
  consultation      Consultation?  @relation(fields: [consultationId], references: [id])
  prescriptionId    String?
  prescription      EPrescription? @relation(fields: [prescriptionId], references: [id])
  remedyId          String
  remedy            Remedy         @relation(fields: [remedyId], references: [id])
  dosage            String
  frequency         String
  duration          String
  notes             String?
  aiRecommended     Boolean        @default(false)
  progress          TreatmentProgress @default(ONGOING)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  // Relations 
  medicineReminders MedicineReminder[]
}

enum TreatmentProgress {
  NOT_STARTED
  ONGOING
  COMPLETED
  DISCONTINUED
}

// Medicine Reminder for patients
model MedicineReminder {
  id                String    @id @default(cuid())
  patientId         String
  patient           Patient   @relation(fields: [patientId], references: [id])
  treatmentId       String
  treatment         Treatment @relation(fields: [treatmentId], references: [id])
  reminderTime      DateTime[]
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

// Follow-up system for doctors
model FollowUp {
  id                String        @id @default(cuid())
  practitionerId    String
  practitioner      Practitioner  @relation(fields: [practitionerId], references: [id])
  consultationId    String
  consultation      Consultation  @relation(fields: [consultationId], references: [id])
  scheduledDate     DateTime
  notes             String?
  status            FollowUpStatus @default(PENDING)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

enum FollowUpStatus {
  PENDING
  COMPLETED
  MISSED
  RESCHEDULED
}

// Health Report generated by AI
model HealthReport {
  id                String        @id @default(cuid())
  userId            String
  user              User          @relation(fields: [userId], references: [id])
  patientId         String
  patient           Patient       @relation(fields: [patientId], references: [id])
  consultationId    String?       @unique
  consultation      Consultation? @relation(fields: [consultationId], references: [id])
  reportData        Json          // Detailed health analysis
  isPaid            Boolean       @default(false)
  amount            Float?        // Report fee if applicable
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

// Health Image Analysis (tongue, nail, eye)
model HealthImage {
  id                String      @id @default(cuid())
  patientId         String
  patient           Patient     @relation(fields: [patientId], references: [id])
  imageType         ImageType
  imageUrl          String
  analysisResult    Json?       // AI analysis result
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

enum ImageType {
  TONGUE
  NAIL
  EYE
  OTHER
}

// Lifestyle recommendations by AI
model LifestyleRecommendation {
  id                String    @id @default(cuid())
  patientId         String
  patient           Patient   @relation(fields: [patientId], references: [id])
  category          String    // Diet, Exercise, Sleep, etc.
  recommendations   Json      // Detailed recommendations
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

// Emergency SOS feature
model EmergencySOS {
  id                String    @id @default(cuid())
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  patientId         String
  patient           Patient   @relation(fields: [patientId], references: [id])
  status            SOSStatus @default(INITIATED)
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

enum SOSStatus {
  INITIATED
  DOCTOR_ASSIGNED
  RESOLVED
  CANCELLED
}

// Medicine Inventory for clinics
model MedicineInventory {
  id                String    @id @default(cuid())
  clinicId          String
  clinic            Clinic    @relation(fields: [clinicId], references: [id])
  remedyId          String
  remedy            Remedy    @relation(fields: [remedyId], references: [id])
  potency           String
  quantity          Int
  batchNumber       String?
  expiryDate        DateTime?
  isLowStock        Boolean   @default(false)
  lowStockThreshold Int       @default(10)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@unique([clinicId, remedyId, potency])
}

// Doctor Reviews
model DoctorReview {
  id                String       @id @default(cuid())
  practitionerId    String
  practitioner      Practitioner @relation(fields: [practitionerId], references: [id])
  rating            Float        // 1-5 rating
  review            String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

// Payment model for subscription and consultations
model Payment {
  id                String        @id @default(cuid())
  userId            String
  user              User          @relation(fields: [userId], references: [id])
  amount            Float
  paymentType       PaymentType
  status            PaymentStatus @default(PENDING)
  transactionId     String?
  metadata          Json?         // Additional payment details
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

enum PaymentType {
  SUBSCRIPTION
  CONSULTATION
  HEALTH_REPORT
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// Remedy information (homeopathic medicines)
model Remedy {
  id                String               @id @default(cuid())
  name              String               @unique
  description       String
  mainIndications   String[]
  potencies         String[]
  contraindications String?
  sideEffects       String?
  source            String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  
  // Relations
  treatments        Treatment[]
  symptomRemedies   SymptomRemedy[]
  inventory         MedicineInventory[]
}

// Symptom catalog
model Symptom {
  id                String          @id @default(cuid())
  name              String          @unique
  description       String
  bodySystem        String?
  severity          String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  // Relations
  symptomRecords    SymptomRecord[]
  symptomRemedies   SymptomRemedy[]
}

// Mapping between symptoms and remedies (used by AI for recommendations)
model SymptomRemedy {
  id                 String    @id @default(cuid())
  symptomId          String
  symptom            Symptom   @relation(fields: [symptomId], references: [id])
  remedyId           String
  remedy             Remedy    @relation(fields: [remedyId], references: [id])
  effectivenessScore Float
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  @@unique([symptomId, remedyId])
}

// Patient symptom tracking
model SymptomRecord {
  id                String    @id @default(cuid())
  patientId         String
  patient           Patient   @relation(fields: [patientId], references: [id])
  symptomId         String
  symptom           Symptom   @relation(fields: [symptomId], references: [id])
  intensity         Int       // Scale 1-10
  notes             String?
  recordedAt        DateTime  @default(now())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

// Practitioner availability for scheduling
model Availability {
  id                String       @id @default(cuid())
  practitionerId    String
  practitioner      Practitioner @relation(fields: [practitionerId], references: [id])
  dayOfWeek         Int          // 0-6 (Sunday-Saturday)
  startTime         String       // Format: HH:MM (24-hour)
  endTime           String       // Format: HH:MM (24-hour)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  @@unique([practitionerId, dayOfWeek, startTime, endTime])
}

// Authentication models for NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
